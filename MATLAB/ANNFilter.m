ICAClassificationDataSetup
%%
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 03-May-2018 09:49:58
%
% This script assumes these variables are defined:
%
%   sampleSet - input data.
%   labelSet - target data.

x = [sampleSet];
t = labelSet;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Scaled conjugate gradient backpropagation.
check = 0;
neurons = 1:8;
layers = 1:3;
bestNet = [];
while check < 0.81
    % Create a Pattern Recognition Network
    hiddenLayerSize = datasample(neurons ,datasample(layers ,1));
    net = patternnet(hiddenLayerSize, trainFcn);

    % Setup Division of Data for Training, Validation, Testing
    net.divideParam.trainRatio = 70/100;
    net.divideParam.valRatio = 15/100;
    net.divideParam.testRatio = 15/100;

    net.trainParam.epochs=1000000;
    net.trainParam.mu = 0.0001;
    net.trainParam.max_fail = 15;
    net.performFcn = 'mse';
    % Train the Network
    [net,tr] = train(net,x,t);

    %%
    % Test the Network
    y = net(x);
    e = gsubtract(t,y);
    performance = perform(net,t,y);
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);

    % View the Network
    % view(net)

    % Plots
    % Uncomment these lines to enable various plots.
    %figure, plotperform(tr)
    %figure, plottrainstate(tr)
    %figure, ploterrhist(e)
    %figure, plotroc(t,y)

    C = confusionmat(t(1, :), y(1,:)>y(2,:));

    checknew = C(1)/(C(1) + C(3));
    check2new = C(1)/(C(1) + C(2));
    if rms([checknew, check2new]) > check
        check = rms([checknew, check2new]);
        disp(check);
        bestNet = net;
    end
end

figure, plotconfusion(t,y)

