function score = NET(data, labels, sequence)

idx = find(sequence==1);
LAMBDA = 0.1;

% Encode categorical targets
T0 = []; T1 = []; T2 = [];
for i=1:length(labels)
    % T0 = [T0 isequal(labels(i), {'T0'})];
    T1 = [T1 isequal(labels(i), {'T1'})];
    T2 = [T2 isequal(labels(i), {'T2'})];
end
%%
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 03-May-2018 09:49:58
%
% This script assumes these variables are defined:
%
%   sampleSet - input data.
%   labelSet - target data.

x = data(idx, :);
t = [T1; T2];

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = [30 30 10];
net = patternnet(hiddenLayerSize, trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

net.trainParam.epochs=1000;
net.trainParam.mu = 0.0001;
net.trainParam.max_fail = 20;
net.trainParam.goal=1e-6; 
net.performFcn='mse'; % net.performParam.ratio=0.8; 
net.trainParam.showWindow = false;
scores = [];
rng(1);
for i=1
%     set = randsample(length(x), 5000);
%     xSet = x(:, set);
%     tSet = t(set);
    % Train the Network
    [newnet,tr] = train(net,x,t);

    %%
    % Test the Network
    y = newnet(x);
    e = gsubtract(t,y);
    score = perform(newnet,t,y);
    tind = vec2ind(t);
    yind = vec2ind(y);
    percentErrors = sum(tind ~= yind)/numel(tind);

%     [m i1] = max(t);
%     [m i2] = max(y);
% 
%     C = confusionmat(i1, i2)';
% 
%     % sens = TP/(TP+FN)
%     sens1 = C(1)/(C(1) + C(4) + C(7));
%     if isnan(sens1) 
%         sens1 = 0;
%     end
%     sens2 = C(5)/(C(5) + C(2) + C(8));
%     if isnan(sens2) 
%         sens2 = 0;
%     end
%     sens3 = C(9)/(C(9) + C(3) + C(6));
%     if isnan(sens3) 
%         sens3 = 0;
%     end
%     sens = [sens1, sens2, sens3];
% 
%     % spec = TN/(TN+FP)
%     spec1 = (C(5) + C(9))/(C(5) + C(9) + C(2) + C(3));
%     if isnan(spec1) 
%         spec1 = 0;
%     end
%     spec2 = (C(1) + C(9))/(C(1) + C(9) + C(4) + C(6));
%     if isnan(spec2) 
%         spec2 = 0;
%     end
%     spec3 = (C(1) + C(5))/(C(1) + C(5) + C(7) + C(8));
%     if isnan(spec3) 
%         spec3 = 0;
%     end
%     spec = [spec1, spec2, spec3];

    scores = [scores percentErrors]; %rms([sens, spec])];
end

score = mean(scores);
%score = score - LAMBDA*sum(sequence);
% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotroc(t,y)

% C = confusionmat(t(1, :), y(1,:)>y(2,:));
% 
% checknew = C(1)/(C(1) + C(3));
% check2new = C(1)/(C(1) + C(2));
% score = rms([checknew, check2new]);

% figure, plotconfusion(t,y)